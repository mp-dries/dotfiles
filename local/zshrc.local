#-------------------------------
#           GENERAL
#-------------------------------

# Export PATH variables
while read p; do
    if [[ ${p:0:5} == '$HOME' ]]; then
        export PATH=${HOME}${p:5}:$PATH
    else
        export PATH=${p}:$PATH
    fi
done < $DOTFILES/local/zsh/paths

# Export other variables
while read p; do
    if [[ ${p:0:1} != '#' ]]; then
	export ${p/'$HOME'/$HOME}	
    fi
done < $DOTFILES/local/zsh/variables

# Export hidden variables
if [[ -f $DOTFILES/local/.env ]]; then
        while read p; do
                if [[ ${p:0:1} != '#' ]]; then
                        export ${p/'$HOME'/$HOME}
                fi
        done < $DOTFILES/local/.env
fi

# Export Golang variables if Go is installed
if [[ -d "/usr/local/go" ]]; then
    export GOROOT=/usr/local/go
    export PATH=$PATH:$GOROOT/bin
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
fi

#-------------------------------
#           VIM
#-------------------------------

#-------------------------------
#           TMUX
#-------------------------------

# TMUX Variables
ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOSTART_ONCE=true
ZSH_TMUX_FIXTERM=true
ZSH_TMUX_AUTOQUIT=true

#-------------------------------
#           ZSH
#-------------------------------

# Set theme
ZSH_THEME="robbyrussell"

# Enable plugins
plugins=(z tmux)

# Source zsh
export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Time since last commit
function minutes_since_commit(){
  if git rev-parse --git-dir > /dev/null 2>&1; then
        # Only proceed if there is actually a commit.
        if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
            # Get the last commit.
            last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`
            now=`date +%s`
            seconds_since_last_commit=$((now-last_commit))

            # Totals
            MINUTES=$((seconds_since_last_commit / 60))
            HOURS=$((seconds_since_last_commit/3600))
           
            # Sub-hours and sub-minutes
            DAYS=$((seconds_since_last_commit / 86400))
            SUB_HOURS=$((HOURS % 24))
            SUB_MINUTES=$((MINUTES % 60))
            
            if [[ -n $(git status -s 2> /dev/null) ]]; then
                if [ "$MINUTES" -gt 30 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
                elif [ "$MINUTES" -gt 10 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
                else
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
                fi
            else
                COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            fi

            if [ "$HOURS" -gt 24 ]; then
                echo "$COLOR${DAYS}d ${SUB_HOURS}h ${SUB_MINUTES}m%{$reset_color%}"
            elif [ "$MINUTES" -gt 60 ]; then
                echo "$COLOR${HOURS}h ${SUB_MINUTES}m%{$reset_color%}"
            else
                echo "$COLOR${MINUTES} m%{$reset_color%}"
            fi
        fi
    fi
}

# Customize prompt
ZSH_THEME_GIT_PROMPT_DIRTY='%Uλ%u'
ZSH_THEME_GIT_PROMPT_CLEAN='λ'
ZSH_THEME_GIT_PROMPT_PREFIX=" %{$fg[grey]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
PROMPT='%(?,%{$fg[green]%},%{$fg[red]%}) $(parse_git_dirty) %{$reset_color%}'
RPROMPT='%{$fg[grey]%}$(minutes_since_commit)%{$reset_color%}'
